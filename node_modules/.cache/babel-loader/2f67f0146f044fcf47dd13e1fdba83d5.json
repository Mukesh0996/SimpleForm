{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useInput = validate => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validate(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const valueBlurHandler = () => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError,\n    isValid: valueIsValid,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/01-starting-project 3/src/Hooks/useInput.js"],"names":["useState","useInput","validate","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","valueBlurHandler","reset","isValid"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAEA,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAAA;;AAE3B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMO,YAAY,GAAGL,QAAQ,CAACC,YAAD,CAA7B;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFH;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC3BP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFH;;AAIE,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKF,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AAEHK,IAAAA,QAFG;AAGHO,IAAAA,OAAO,EAAER,YAHN;AAIHE,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHC,IAAAA;AANG,GAAP;AAQH,CA5BD;;GAAMb,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import {useState} from 'react';\n\nconst useInput = (validate) => {\n\n    const [enteredValue, setEnteredValue] = useState(\"\");\n    const [isTouched, setIsTouched] = useState(false);\n    const valueIsValid = validate(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n    \n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n      }\n\n    const valueBlurHandler = () => {\n        setIsTouched(true);\n      }    \n\n      const reset = () => {\n          setEnteredValue(\"\");\n          setIsTouched(false);\n      }\n\n    return {\n        value: enteredValue,\n        hasError,\n        isValid: valueIsValid,\n        valueChangeHandler,\n        valueBlurHandler,\n        reset\n    }\n}\nexport default useInput;"]},"metadata":{},"sourceType":"module"}