{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useState } from \"react\";\nconst initalInputState = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      value: state.value,\n      isTouched: true\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      value: \"\",\n      isTouched: false\n    };\n  }\n\n  return inputStateReducer;\n};\n\nconst useInput = validate => {\n  _s();\n\n  const [inputState, dispathInputValueFn] = useReducer(inputStateReducer, initalInputState);\n  const valueIsValid = validate(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispathInputValueFn({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n\n  const valueBlurHandler = () => {\n    dispathInputValueFn({\n      type: \"BLUR\"\n    });\n  };\n\n  const reset = () => {\n    dispathInputValueFn({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    value: inputState.value,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    isValid: valueIsValid,\n    reset\n  };\n};\n\n_s(useInput, \"9LASC74jiPnijXF3ljK7zKLRaME=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/mukesh-8058/Documents/Maxmillian/frontend/Official/Validation with perfect error/src/Hooks/useInput.js"],"names":["useReducer","useState","initalInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validate","inputState","dispathInputValueFn","valueIsValid","hasError","valueChangeHandler","event","target","valueBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAGA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,SAAS,EAAE;AAFU,CAAzB;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEzC,MAAGA,MAAM,CAACC,IAAP,KAAgB,OAAnB,EAA4B;AACxB,WAAO;AACHL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KADX;AACkBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AADnC,KAAP;AAIH;;AACD,MAAGG,MAAM,CAACC,IAAP,KAAgB,MAAnB,EAA2B;AACvB,WAAO;AACHL,MAAAA,KAAK,EAAEG,KAAK,CAACH,KADV;AACiBC,MAAAA,SAAS,EAAG;AAD7B,KAAP;AAKH;;AACD,MAAGG,MAAM,CAACC,IAAP,KAAgB,OAAnB,EAA4B;AACxB,WAAO;AACHL,MAAAA,KAAK,EAAC,EADH;AAEHC,MAAAA,SAAS,EAAE;AAFR,KAAP;AAKH;;AACD,SAAOC,iBAAP;AACH,CAvBD;;AA0BA,MAAMI,QAAQ,GAAIC,QAAD,IAAc;AAAA;;AAE3B,QAAM,CAACC,UAAD,EAAaC,mBAAb,IAAoCZ,UAAU,CAACK,iBAAD,EAAoBH,gBAApB,CAApD;AAEA,QAAMW,YAAY,GAAGH,QAAQ,CAACC,UAAU,CAACR,KAAZ,CAA7B;AACA,QAAMW,QAAQ,GAAI,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA9C;;AAEA,QAAMW,kBAAkB,GAAIC,KAAD,IAAW;AACpCJ,IAAAA,mBAAmB,CAAC;AAACJ,MAAAA,IAAI,EAAE,OAAP;AAAgBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAApC,KAAD,CAAnB;AAED,GAHD;;AAIA,QAAMe,gBAAgB,GAAG,MAAM;AAC3BN,IAAAA,mBAAmB,CAAC;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAnB;AAEH,GAHD;;AAIA,QAAMW,KAAK,GAAG,MAAM;AACnBP,IAAAA,mBAAmB,CAAC;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAnB;AACA,GAFD;;AAIA,SAAO;AACHL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADf;AAEHW,IAAAA,QAFG;AAGHC,IAAAA,kBAHG;AAIHG,IAAAA,gBAJG;AAKHE,IAAAA,OAAO,EAAEP,YALN;AAMHM,IAAAA;AANG,GAAP;AASH,CA5BD;;GAAMV,Q;;AA8BN,eAAeA,QAAf","sourcesContent":["import { useReducer, useState } from \"react\";\n\n\nconst initalInputState = {\n    value: \"\",\n    isTouched: false\n}\n\nconst inputStateReducer = (state, action) => {\n\n    if(action.type === \"INPUT\") {\n        return {\n            value: action.value, isTouched: state.isTouched\n        }\n\n    }\n    if(action.type === \"BLUR\") {\n        return {\n            value: state.value, isTouched : true\n        }\n\n\n    }\n    if(action.type === \"RESET\") {\n        return {\n            value:\"\",\n            isTouched: false\n        }\n\n    }\n    return inputStateReducer;\n}\n\n\nconst useInput = (validate) => {\n\n    const [inputState, dispathInputValueFn] = useReducer(inputStateReducer, initalInputState)\n    \n    const valueIsValid = validate(inputState.value);\n    const hasError =  !valueIsValid && inputState.isTouched;\n\n    const valueChangeHandler = (event) => {\n      dispathInputValueFn({type: \"INPUT\", value: event.target.value})\n      \n    }\n    const valueBlurHandler = () => {\n        dispathInputValueFn({type:\"BLUR\"})\n       \n    }\n    const reset = () => {\n     dispathInputValueFn({type:\"RESET\"})\n    }\n\n    return {\n        value: inputState.value,\n        hasError,\n        valueChangeHandler,\n        valueBlurHandler,\n        isValid: valueIsValid,\n        reset\n    }\n\n}\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}