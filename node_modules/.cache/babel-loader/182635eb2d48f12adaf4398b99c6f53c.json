{"ast":null,"code":"var _jsxFileName = \"/Users/mukesh-8058/Desktop/01-starting-project 3/src/components/BasicForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../Hooks/useInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicForm = () => {\n  _s();\n\n  const {\n    value: fName,\n    isValid: fNameIsValid,\n    valueBlurHandler: fNameBlurhandler,\n    valueChangeHandler: fNameHandler,\n    hasError: fNameError,\n    reset: resetfName\n  } = useInput(fName => fName.trim() !== '');\n  const {\n    value: lName,\n    isValid: lnameIsValid,\n    valueBlurHandler: lnameBlurhandler,\n    valueChangeHandler: lnameHandler,\n    hasError: lNameError,\n    reset: resetlName\n  } = useInput(lName => lName.trim() !== '');\n  const [email, setEmail] = useState(\"\");\n  const [emailBlur, setEmailBlur] = useState(false);\n  const emailIsValid = email.trim() !== '' && email.includes('@');\n  const emailInputIsInvalid = !emailIsValid && emailBlur;\n  let formIsValid = false;\n\n  if (fNameIsValid && lnameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  let nameInputClass = fNameError ? 'form-control invalid' : 'form-control';\n  let lnameInputClass = lNameError ? 'form-control invalid' : 'form-control';\n  let emailInputClass = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  const emailHandler = event => {\n    setEmail(event.target.value);\n  };\n\n  const emailBlurHandler = () => {\n    setEmailBlur(true);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    resetfName();\n    resetlName();\n    setEmailBlur(false);\n    setEmail(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClass,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          value: fName,\n          onChange: fNameHandler,\n          onBlur: fNameBlurhandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), fNameError && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error-text\",\n            children: \"First Name Should Not Be Empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 32\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: lnameInputClass,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          value: lName,\n          onChange: lnameHandler,\n          onBlur: lnameBlurhandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), lNameError && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error-text\",\n            children: \"Last Name Should Not Be Empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 32\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"E-Mail Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: email,\n        onChange: emailHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-text\",\n          children: \"Please Enter A Valid Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 39\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicForm, \"6g2vYdk3MRbcazMOXy8dC2ZjqCw=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = BasicForm;\nexport default BasicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"sources":["/Users/mukesh-8058/Desktop/01-starting-project 3/src/components/BasicForm.js"],"names":["useState","useInput","BasicForm","value","fName","isValid","fNameIsValid","valueBlurHandler","fNameBlurhandler","valueChangeHandler","fNameHandler","hasError","fNameError","reset","resetfName","trim","lName","lnameIsValid","lnameBlurhandler","lnameHandler","lNameError","resetlName","email","setEmail","emailBlur","setEmailBlur","emailIsValid","includes","emailInputIsInvalid","formIsValid","nameInputClass","lnameInputClass","emailInputClass","emailHandler","event","target","emailBlurHandler","submitHandler","preventDefault"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../Hooks/useInput\";\n\nconst BasicForm = () => {\n\n   const {\n     value: fName, \n     isValid: fNameIsValid, \n     valueBlurHandler: fNameBlurhandler, \n     valueChangeHandler: fNameHandler, \n     hasError: fNameError, reset: resetfName \n    } = useInput(fName => fName.trim() !== '');\n\n    const {\n      value:lName,\n      isValid: lnameIsValid,\n      valueBlurHandler:lnameBlurhandler,\n      valueChangeHandler: lnameHandler,\n      hasError: lNameError, reset: resetlName \n    } = useInput(lName => lName.trim() !== '');\n\n\n\n\n\n  const [email,setEmail] = useState(\"\");\n  const [emailBlur, setEmailBlur] = useState(false);\n\n  const emailIsValid = email.trim() !== '' && email.includes('@');\n  const emailInputIsInvalid = !emailIsValid && emailBlur;\n\n  let formIsValid = false;\n  if(fNameIsValid && lnameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  let nameInputClass = fNameError ? 'form-control invalid'  : 'form-control';\n  let lnameInputClass = lNameError ? 'form-control invalid'  : 'form-control'\n  let emailInputClass = emailInputIsInvalid ? 'form-control invalid'  : 'form-control'\n\n\n  const emailHandler = (event) => {\n    setEmail(event.target.value);\n    \n  }\n\n  const emailBlurHandler = () => {\n    setEmailBlur(true);\n\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    resetfName();\n    resetlName();\n\n    setEmailBlur(false);\n    setEmail(\"\");\n    \n\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className='control-group'>\n        <div className={nameInputClass}>\n          <label htmlFor='name'>First Name</label>\n          <input type='text' id='name' value={fName} onChange={fNameHandler} onBlur={fNameBlurhandler}/>\n          {fNameError && <div> <span className=\"error-text\">First Name Should Not Be Empty</span> </div>}\n        </div>\n        <div className={lnameInputClass}>\n          <label htmlFor='name'>Last Name</label>\n          <input type='text' id='name' value={lName} onChange={lnameHandler} onBlur={lnameBlurhandler}/>\n          {lNameError && <div> <span className=\"error-text\">Last Name Should Not Be Empty</span> </div>}\n        </div>\n      </div>\n      <div className={emailInputClass}>\n        <label htmlFor='name'>E-Mail Address</label>\n        <input type='text' id='name' value={email} onChange={emailHandler} onBlur={emailBlurHandler}/>\n        {emailInputIsInvalid && <div> <span className=\"error-text\">Please Enter A Valid Email</span> </div>}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n"]},"metadata":{},"sourceType":"module"}