{"version":3,"sources":["Hooks/useInput.js","components/BasicForm.js","App.js","index.js"],"names":["initalInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validate","useReducer","inputState","dispathInputValueFn","valueIsValid","hasError","valueChangeHandler","event","target","valueBlurHandler","isValid","reset","BasicForm","fName","trim","fNameIsValid","fNameBlurhandler","fNameHandler","fNameError","resetfName","lName","lnameIsValid","lnameBlurhandler","lnameHandler","lNameError","resetlName","email","includes","emailIsValid","emailHandler","emailBlurhandler","emailError","emailReset","formIsValid","nameInputClass","lnameInputClass","emailInputClass","onSubmit","preventDefault","console","log","firstName","lastName","className","htmlFor","name","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLAGMA,EAAmB,CACrBC,MAAO,GACPC,WAAW,GAGTC,EAAoB,SAACC,EAAOC,GAE9B,MAAmB,UAAhBA,EAAOC,KACC,CACHL,MAAOI,EAAOJ,MAAOC,UAAWE,EAAMF,WAI3B,SAAhBG,EAAOC,KACC,CACHL,MAAOG,EAAMH,MAAOC,WAAY,GAGrB,UAAhBG,EAAOC,KACC,CACHL,MAAM,GACNC,WAAW,GAIZF,GAkCIO,EA9BE,SAACC,GAEd,MAA0CC,qBAAWN,EAAmBH,GAAxE,mBAAOU,EAAP,KAAmBC,EAAnB,KAEMC,EAAeJ,EAASE,EAAWT,OACnCY,GAAaD,GAAgBF,EAAWR,UAc9C,MAAO,CACHD,MAAOS,EAAWT,MAClBY,WACAC,mBAfuB,SAACC,GAC1BJ,EAAoB,CAACL,KAAM,QAASL,MAAOc,EAAMC,OAAOf,SAetDgB,iBAZqB,WACrBN,EAAoB,CAACL,KAAK,UAY1BY,QAASN,EACTO,MAVU,WACbR,EAAoB,CAACL,KAAK,a,OCqBhBc,EAnEG,WAEf,MAMKb,GAAS,SAAAc,GAAK,MAAuB,KAAjBA,EAAMC,UALtBD,EADT,EACEpB,MACSsB,EAFX,EAEEL,QACkBM,EAHpB,EAGEP,iBACoBQ,EAJtB,EAIEX,mBACUY,EALZ,EAKEb,SAA6Bc,EAL/B,EAKwBR,MAGvB,EAMIZ,GAAS,SAAAqB,GAAK,MAAqB,KAAjBA,EAAMN,UALpBM,EADR,EACE3B,MACS4B,EAFX,EAEEX,QACiBY,EAHnB,EAGEb,iBACoBc,EAJtB,EAIEjB,mBACUkB,EALZ,EAKEnB,SAA6BoB,EAL/B,EAKwBd,MAGxB,EAA8JZ,GAAS,SAAA2B,GAAK,MAAqB,KAAjBA,EAAMZ,QAAiBY,EAAMC,SAAS,QAAxMD,EAAd,EAAOjC,MAAuBmC,EAA9B,EAAqBlB,QAA2CmB,EAAhE,EAA4CvB,mBAAoDwB,EAAhG,EAA8ErB,iBAA8CsB,EAA5H,EAAkH1B,SAA6B2B,EAA/I,EAAwIrB,MAGtIsB,GAAc,EACflB,GAAgBM,GAAgBO,IACjCK,GAAc,GAGhB,IAAIC,EAAiBhB,EAAa,uBAA0B,eACxDiB,EAAkBX,EAAa,uBAA0B,eACzDY,EAAkBL,EAAa,uBAA0B,eAY7D,OACE,uBAAMM,SAVc,SAAC9B,GACrBA,EAAM+B,iBACNC,QAAQC,IAAI,CAACC,UAAW5B,EAAO6B,SAAUtB,EAAOM,MAAOA,IACvDP,IACAM,IACAO,KAKA,UACE,sBAAKW,UAAU,gBAAf,UACE,sBAAKA,UAAWT,EAAhB,UACE,uBAAOU,QAAQ,OAAf,wBACA,uBAAO9C,KAAK,OAAO+C,KAAK,YAAYC,GAAG,OAAOrD,MAAOoB,EAAOkC,SAAU9B,EAAc+B,OAAQhC,IAC3FE,GAAc,sBAAMyB,UAAU,aAAhB,+CAEjB,sBAAKA,UAAWR,EAAhB,UACE,uBAAOS,QAAQ,QAAf,uBACA,uBAAO9C,KAAK,OAAO+C,KAAK,WAAWC,GAAG,QAAQrD,MAAO2B,EAAO2B,SAAUxB,EAAcyB,OAAQ1B,IAC3FE,GAAc,oCAAM,sBAAMmB,UAAU,aAAhB,2CAAN,UAGnB,sBAAKA,UAAWP,EAAhB,UACE,uBAAOQ,QAAQ,QAAf,4BACA,uBAAO9C,KAAK,OAAOgD,GAAG,QAAQD,KAAK,QAAQpD,MAAOiC,EAAOqB,SAAUlB,EAAcmB,OAAQlB,IACxFC,GAAc,oCAAM,sBAAMY,UAAU,aAAhB,wCAAN,aAGjB,qBAAKA,UAAU,eAAf,SACE,wBAAQM,UAAWhB,EAAnB,0BCpDOiB,MATf,WAEE,OACE,qBAAKP,UAAU,MAAf,SACA,cAAC,EAAD,OCDJQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.f0a11252.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\n\nconst initalInputState = {\n    value: \"\",\n    isTouched: false\n}\n\nconst inputStateReducer = (state, action) => {\n\n    if(action.type === \"INPUT\") {\n        return {\n            value: action.value, isTouched: state.isTouched\n        }\n\n    }\n    if(action.type === \"BLUR\") {\n        return {\n            value: state.value, isTouched : true\n        }\n    }\n    if(action.type === \"RESET\") {\n        return {\n            value:\"\",\n            isTouched: false\n        }\n\n    }\n    return initalInputState;\n}\n\n\nconst useInput = (validate) => {\n\n    const [inputState, dispathInputValueFn] = useReducer(inputStateReducer, initalInputState)\n    \n    const valueIsValid = validate(inputState.value);\n    const hasError =  !valueIsValid && inputState.isTouched;\n\n    const valueChangeHandler = (event) => {\n      dispathInputValueFn({type: \"INPUT\", value: event.target.value})\n      \n    }\n    const valueBlurHandler = () => {\n        dispathInputValueFn({type:\"BLUR\"})\n       \n    }\n    const reset = () => {\n     dispathInputValueFn({type:\"RESET\"})\n    }\n\n    return {\n        value: inputState.value,\n        hasError,\n        valueChangeHandler,\n        valueBlurHandler,\n        isValid: valueIsValid,\n        reset\n    }\n\n}\n\nexport default useInput;","import useInput from \"../Hooks/useInput\";\n\nconst BasicForm = () => {\n\n   const {\n     value: fName, \n     isValid: fNameIsValid, \n     valueBlurHandler: fNameBlurhandler, \n     valueChangeHandler: fNameHandler, \n     hasError: fNameError, reset: resetfName \n    } = useInput(fName =>   fName.trim() !== '');\n\n    const {\n      value:lName,\n      isValid: lnameIsValid,\n      valueBlurHandler:lnameBlurhandler,\n      valueChangeHandler: lnameHandler,\n      hasError: lNameError, reset: resetlName \n    } = useInput(lName => lName.trim() !== '');\n\n    const {value: email, isValid: emailIsValid, valueChangeHandler: emailHandler, valueBlurHandler: emailBlurhandler, hasError: emailError, reset: emailReset } = useInput(email => email.trim() !== '' && email.includes('@'));\n\n\n  let formIsValid = false;\n  if(fNameIsValid && lnameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  let nameInputClass = fNameError ? 'form-control invalid'  : 'form-control';\n  let lnameInputClass = lNameError ? 'form-control invalid'  : 'form-control';\n  let emailInputClass = emailError ? 'form-control invalid'  : 'form-control';\n\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    console.log({firstName: fName, lastName: lName, email: email})\n    resetfName();\n    resetlName();\n    emailReset();\n\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className='control-group'>\n        <div className={nameInputClass}>\n          <label htmlFor='name'>First Name</label>\n          <input type='text' name=\"firstName\" id='name' value={fName} onChange={fNameHandler} onBlur={fNameBlurhandler}/>\n          {fNameError && <span className=\"error-text\">First Name Should Not Be Empty</span>}\n        </div>\n        <div className={lnameInputClass}>\n          <label htmlFor='lName'>Last Name</label>\n          <input type='text' name=\"lastName\" id='lName' value={lName} onChange={lnameHandler} onBlur={lnameBlurhandler}/>\n          {lNameError && <div> <span className=\"error-text\">Last Name Should Not Be Empty</span> </div>}\n        </div>\n\n      <div className={emailInputClass}>\n        <label htmlFor='email'>E-Mail Address</label>\n        <input type='text' id='email' name=\"email\" value={email} onChange={emailHandler} onBlur={emailBlurhandler}/>\n        {emailError && <div> <span className=\"error-text\">Please Enter A Valid Email</span> </div>}\n      </div>\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import BasicForm from './components/BasicForm';\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n    <BasicForm/>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}